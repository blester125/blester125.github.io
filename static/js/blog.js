const monthNames = [
  null,
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

/**
 * Convert the date as ints into a string
 * Note:
 *   This does no validation that the day is valid in the month
 * @param {int} month - The integer version of the month starting at 1
 * @param {int} day - The integer version of the day starting at 1
 * @param {int} year - The integer version of the year
 * @returns {str} - The date as a string with the month replaced by the name
 */
function dateString(month, day, year) {
  if (day != null) {
    return monthNames[month] + " " + day + ", " + year;
  }
  return monthNames[month] + ", " + year;
}

/**
 * Convert a string into an id by lowercasing and replacing spaces with a hyphen
 * @param {str} str - The string to turn into an id
 * @returns {str} - The string lowercased with spaces replaced by `-`
 */
function toId(str) {
  return str.toLowerCase().replace(/ /gi, "-");
}

/**
 * Convert a string to title case
 * @param {str} - The string to transform
 * @returns {str} - The string with the first letter of each word capitalized
 */
function toTitleCase(str) {
  var seq = str.toLowerCase().split(" ");
  for (var i = 0; i < seq.length; i++) {
    seq[i] = seq[i][0].toUpperCase() + seq[i].slice(1);
  }
  return seq.join(" ");
}

/**
 * Compare the dates on two blog posts
 * Note:
 *   Sorts so that the more recent thing return 1
 * @param {*} a - The blog object
 * @param {*} b - The second blog object
 * @returns {int} - 1 if the first blog was more recent, -1 if the second
 */
function compareBlogs(a, b) {
  if (a.year == b.year) {
    if (a.month == b.month) {
      return a.day > b.day ? 1 : -1;
    }
    return a.month > b.month ? 1 : -1;
  }
  return a.year > b.year ? 1 : -1;
}

/**
 * Populate target with the blog data
 * @param {str} target - The id of the vue blog template
 * @param {str} link_prefix - The prefix to add to all the blog links
 * @param {List[*]} blogs - A list of objects representing the blogs
 */
function generateBlogs(target, link_prefix, blogs) {
  var link_prefix = link_prefix.replace(/\/$/gi, "");
  var target = document.getElementById(target);
  // sort blog posts so more recent posts are earlier in the list
  blogs.sort((a, b) => -compareBlogs(a, b));
  for (var i = 0; i < blogs.length; i++) {
    // Convert the date into a string
    blogs[i].date = dateString(blogs[i].month, blogs[i].day, blogs[i].year);
    // fix up the link with the prefix, turns `rk.html` into `blog/rk`
    blogs[i].link = link_prefix + "/" + blogs[i].link.replace(/^\//gi, "");
    // Convert the tag values into name and link parts so we can jump to the tag value on the site.
    // Currently it doesn't jump to the div because the div is generated by Vue and isn't made yet?
    var tag_objects = [];
    for (var j = 0; j < blogs[i].tags.length; j++) {
      tag_objects.push({
        name: blogs[i].tags[j],
        link: "/" + link_prefix + "#" + toId(blogs[i].tags[j]),
      });
    }
    blogs[i].tags = tag_objects;
  }
  // Render the blogs with Vue.js
  var app = new Vue({
    el: target,
    data: {
      blogs: blogs,
    },
  });
}

/**
 * Populate target with blog links grouped by the tags
 * @param {str} target - The id of the element to populate
 * @param {List[*]} blogs - A list of blog objects
 */
function generateTags(target, blogs) {
  var target = document.getElementById(target);
  var tags = {};
  // groupby tags and add tag id and title to the object
  for (var i = 0; i < blogs.length; i++) {
    for (var j = 0; j < blogs[i].tags.length; j++) {
      var tag = blogs[i].tags[j];
      if (!(tag in tags)) {
        tags[tag] = {
          blogs: [],
          id: toId(tag),
          name: toTitleCase(tag),
        };
      }
      tags[tag].blogs.push(blogs[i]);
    }
  }
  // convert the groupby object into an array
  tags = Object.values(tags);
  // sort the blog posts so newer ones are on top
  for (var i = 0; i < tags.length; i++) {
    tags[i].blogs.sort((a, b) => -compareBlogs(a, b));
  }
  // sort the tags by the name of the tag
  tags.sort((a, b) => (a.id > b.id ? 1 : -1));
  // render the tag groups with Vue.js
  var app = new Vue({
    el: target,
    data: {
      tags: tags,
    },
  });
}

/**
 * Dynamically generate the tag index and then scroll to the anchor.
 * @param {str} anchor - The id of the html tag to scroll to.
 * @param {int} scroll_speed - How fast we should scroll to the anchor.
 * @param {str} target - The html tag to populate with the tag information.
 * @param {List[*]} blogs - The list of blog information to use when generating the index.
 */
function loadAndScrollTagPage(anchor, scroll_speed, target, blogs) {
  generateTags(target, blogs);
  // Scroll to the anchor
  if ($(anchor).length > 0) {
    $("html, body").animate(
      {
        scrollTop: $(anchor).offset().top,
      },
      scroll_speed
    );
  }
}
